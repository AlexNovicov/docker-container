version: "3.9"

## Services

services:

  ### App (php, nodejs, python)

  pg-app:
    build:
      context: ./app
      dockerfile: Dockerfile
      args:
        TZ: ${WORKSPACE_TIMEZONE}
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    container_name: pg-app
    restart: unless-stopped
    tty: true
    working_dir: /var/www
    ports:
      - "${APP_VITE_PORT}:5173"
    depends_on:
      - pg-mariadb
      - pg-redis
    environment:
      TZ: ${WORKSPACE_TIMEZONE}
    volumes:
      - ./www:/var/www
      - ./app/php_additional.ini:/usr/local/etc/php/conf.d/additional.ini
      - ./app/.profile:/home/www-data/.profile
      - ./app/bin:/home/www-data/bin
      - ~/.ssh:/home/www-data/.ssh:ro
      - ~/.gitconfig:/home/www-data/.gitconfig:ro
    networks:
      - pg-network


  ### Nginx

  pg-nginx:
    image: nginx:stable-alpine
    container_name: pg-nginx
    restart: unless-stopped
    tty: true
    ports:
      - "${NGINX_PORT}:80"
    depends_on:
      - pg-app
    environment:
      TZ: ${WORKSPACE_TIMEZONE}
    volumes:
      - ./www:/var/www
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/log:/var/log/nginx
    networks:
      - pg-network


  ### MariaDB

  pg-mariadb:
    image: mariadb:10.11-rc
    container_name: pg-mariadb
    restart: unless-stopped
    tty: true
    # ports:
    #   - "${MYSQL_PORT}:3306"
    environment:
      TZ: ${WORKSPACE_TIMEZONE} 
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - pg-mariadb-data:/var/lib/mysql
      - ./mariadb:/etc/mysql/sql
    networks:
      - pg-network


  ### phpMyAdmin

  pg-phpmyadmin:
    image: phpmyadmin:5.2
    container_name: pg-phpmyadmin
    restart: unless-stopped
    ports:
      - "${PHPMYADMIN_PORT}:80"
    environment:
      PMA_HOST: pg-mariadb
      UPLOAD_LIMIT: 512M
    networks:
      - pg-network


  ### Redis

  pg-redis:
    image: redis:alpine3.18
    container_name: pg-redis
    restart: unless-stopped
    environment:
      TZ: ${WORKSPACE_TIMEZONE}
    volumes:
      - pg-redis-data:/data
      - ./redis/log:/log
    command: ["redis-server"]
    networks:
      - pg-network


  ### MongoDB

  pg-mongo:
    image: mongo:7.0.2
    container_name: pg-mongo
    restart: unless-stopped
    # ports:
    #   - "${MONGO_PORT}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - pg-mongo-data:/data/db
      - pg-mongo-configdb:/data/configdb
    command: [--auth]
    networks:
      - pg-network


  ### MongoDB Express

  pg-mongo-express:
    image: mongo-express:1.0.0-20-alpine3.18
    container_name: pg-mongo-express
    restart: unless-stopped
    ports:
      - "${MONGO_EXPRESS_PORT}:8081"
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@pg-mongo:27017/
    networks:
      - pg-network


  ### KrakenD

  pg-krakend:
    image: devopsfaith/krakend:2.5
    container_name: pg-krakend
    restart: unless-stopped
    environment:
      KRAKEND_PORT: ${KRAKEND_PORT}
    volumes:
      - ./krakend:/etc/krakend
    networks:
      - pg-network


  ### Meilisearch

  pg-meilisearch:
    image: getmeili/meilisearch:v0.26.1
    container_name: pg-meilisearch
    restart: unless-stopped
    environment:
      MEILI_MASTER_KEY: ${MEILISEARCH_MASTER_KEY}
    volumes:
      - pg-meilisearch:/meili_data
    networks:
      - pg-network


## Docker Networks

networks:

  pg-network:
    driver: bridge


## Volumes

volumes:

  pg-mariadb-data:
   driver: local

  pg-redis-data:
    driver: local

  pg-mongo-data:
    driver: local

  pg-mongo-configdb:
    driver: local

  pg-meilisearch:
    driver: local